// Code generated by command: go run transform_amd64_asm.go -out ../transform_amd64.s -stubs ../transform_amd64.go -pkg curl. DO NOT EDIT.

// +build amd64,gc,!purego

#include "textflag.h"

// func transform(lto *[729]uint, hto *[729]uint, lfrom *[729]uint, hfrom *[729]uint)
TEXT Â·transform(SB), NOSPLIT, $0-32
	MOVQ lto+0(FP), AX
	MOVQ hto+8(FP), CX
	MOVQ lfrom+16(FP), DX
	MOVQ hfrom+24(FP), BX
	MOVQ $0x00000051, BP

RoundLoop:
	// a = from[0]
	MOVQ (DX), SI
	MOVQ (BX), DI

	// b = from[364]
	MOVQ 2912(DX), R8
	MOVQ 2912(BX), R9

	// s = sBox(a, b)
	MOVQ R8, R10
	XORQ DI, R10
	ANDQ SI, R10
	XORQ R9, SI
	ORQ  R10, SI
	NOTQ R10

	// to[0] = s
	MOVQ R10, (AX)
	MOVQ SI, (CX)
	MOVQ $0x0000016c, R10
	MOVQ $0x00000001, R11

StateLoop:
	// a = from[364+t]
	MOVQ 2912(DX)(R10*8), SI
	MOVQ 2912(BX)(R10*8), DI

	// s = sBox(b, a)
	MOVQ SI, R12
	XORQ R9, R12
	ANDQ R8, R12
	XORQ DI, R8
	ORQ  R12, R8
	NOTQ R12

	// to[0+i] = s
	MOVQ R12, (AX)(R11*8)
	MOVQ R8, (CX)(R11*8)

	// b = from[-1+t]
	MOVQ -8(DX)(R10*8), R8
	MOVQ -8(BX)(R10*8), R9

	// s = sBox(a, b)
	MOVQ R8, R12
	XORQ DI, R12
	ANDQ SI, R12
	XORQ R9, SI
	ORQ  R12, SI
	NOTQ R12

	// to[1+i] = s
	MOVQ R12, 8(AX)(R11*8)
	MOVQ SI, 8(CX)(R11*8)

	// a = from[363+t]
	MOVQ 2904(DX)(R10*8), SI
	MOVQ 2904(BX)(R10*8), DI

	// s = sBox(b, a)
	MOVQ SI, R12
	XORQ R9, R12
	ANDQ R8, R12
	XORQ DI, R8
	ORQ  R12, R8
	NOTQ R12

	// to[2+i] = s
	MOVQ R12, 16(AX)(R11*8)
	MOVQ R8, 16(CX)(R11*8)

	// b = from[-2+t]
	MOVQ -16(DX)(R10*8), R8
	MOVQ -16(BX)(R10*8), R9

	// s = sBox(a, b)
	MOVQ R8, R12
	XORQ DI, R12
	ANDQ SI, R12
	XORQ R9, SI
	ORQ  R12, SI
	NOTQ R12

	// to[3+i] = s
	MOVQ R12, 24(AX)(R11*8)
	MOVQ SI, 24(CX)(R11*8)
	SUBQ $0x00000002, R10
	ADDQ $0x00000004, R11
	CMPQ R11, $0x000002d9
	JL   StateLoop

	// swap buffers
	XCHGQ DX, AX
	XCHGQ BX, CX
	DECQ  BP
	JNZ   RoundLoop
	RET
