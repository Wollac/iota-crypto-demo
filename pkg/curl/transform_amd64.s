// Code generated by command: go run transform_amd64_asm.go -out ../transform_amd64.s -stubs ../transform_amd64.go -pkg curl. DO NOT EDIT.

//go:build amd64 && gc && !purego

#include "textflag.h"

// func transform(lto *[729]uint, hto *[729]uint, lfrom *[729]uint, hfrom *[729]uint)
TEXT Â·transform(SB), NOSPLIT, $0-32
	MOVQ lto+0(FP), AX
	MOVQ hto+8(FP), CX
	MOVQ lfrom+16(FP), DX
	MOVQ hfrom+24(FP), BX
	MOVQ $0x00000051, SI

RoundLoop:
	// a = from[0]
	MOVQ (DX), DI
	MOVQ (BX), R8

	// b = from[364]
	MOVQ 2912(DX), R9
	MOVQ 2912(BX), R10

	// s = sBox(a, b)
	MOVQ R9, R11
	XORQ R8, R11
	ANDQ DI, R11
	XORQ R10, DI
	ORQ  R11, DI
	NOTQ R11

	// to[0] = s
	MOVQ R11, (AX)
	MOVQ DI, (CX)
	MOVQ $0x0000016c, R11
	MOVQ $0x00000001, R12

StateLoop:
	// a = from[364+t]
	MOVQ 2912(DX)(R11*8), DI
	MOVQ 2912(BX)(R11*8), R8

	// s = sBox(b, a)
	MOVQ DI, R13
	XORQ R10, R13
	ANDQ R9, R13
	XORQ R8, R9
	ORQ  R13, R9
	NOTQ R13

	// to[0+i] = s
	MOVQ R13, (AX)(R12*8)
	MOVQ R9, (CX)(R12*8)

	// b = from[-1+t]
	MOVQ -8(DX)(R11*8), R9
	MOVQ -8(BX)(R11*8), R10

	// s = sBox(a, b)
	MOVQ R9, R13
	XORQ R8, R13
	ANDQ DI, R13
	XORQ R10, DI
	ORQ  R13, DI
	NOTQ R13

	// to[1+i] = s
	MOVQ R13, 8(AX)(R12*8)
	MOVQ DI, 8(CX)(R12*8)

	// a = from[363+t]
	MOVQ 2904(DX)(R11*8), DI
	MOVQ 2904(BX)(R11*8), R8

	// s = sBox(b, a)
	MOVQ DI, R13
	XORQ R10, R13
	ANDQ R9, R13
	XORQ R8, R9
	ORQ  R13, R9
	NOTQ R13

	// to[2+i] = s
	MOVQ R13, 16(AX)(R12*8)
	MOVQ R9, 16(CX)(R12*8)

	// b = from[-2+t]
	MOVQ -16(DX)(R11*8), R9
	MOVQ -16(BX)(R11*8), R10

	// s = sBox(a, b)
	MOVQ R9, R13
	XORQ R8, R13
	ANDQ DI, R13
	XORQ R10, DI
	ORQ  R13, DI
	NOTQ R13

	// to[3+i] = s
	MOVQ R13, 24(AX)(R12*8)
	MOVQ DI, 24(CX)(R12*8)
	SUBQ $0x00000002, R11
	ADDQ $0x00000004, R12
	CMPQ R12, $0x000002d9
	JL   StateLoop

	// swap buffers
	XCHGQ DX, AX
	XCHGQ BX, CX
	DECQ  SI
	JNZ   RoundLoop
	RET
